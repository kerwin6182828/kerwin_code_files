一、正则匹配中贪婪的意思
贪婪是指：在符合现有正则表达式的情况下，尽可能多的去匹配字符。


二、
td是table底下tr的子节点；li是有序列表<ol>和无序列表<ul>的子节点; h2 是第二大的标题标签。


三、
一般来说，get是请求数据，post是向服务器发送数据。get安全性较低，而post的安全性较高。get的参数是在请求的url上的，post的参数是在请求体内。
get传送的数据有大小限制，post可以传送更大的数据量。


四、
1.问题：没有给requests加上合适的headers、cookies导致请求页面失败。
  解决：抓包分析，找到最关键的headers、cookies
2.问题：频繁访问，服务器给你弹验证码。
  解决：1.图像识别破解 2.selenium 3.分析前端js代码 4.打码平台
3.问题：封ip
  解决：接入ip池
4.问题：网站结构调整
  解决：将请求异常的url放入异常队列，并写入日志，后期定时维护
5.问题：数据是动态生成的
  解决：1.分析ajax请求，找到对应的url 2.selenium/splash
6.问题：服务器会验证部分请求的token
  解决：找到对应的js代码，破解加密的方式，模拟post表单提交


五、
进程：是系统分配资源的基本单位
线程：是程序执行运算的基本单位
关系：一个进程可以有一个或多个线程，而线程属于某个既定的进程。同一进程的线程共享一个进程的资源，而线程的执行又需要协作同步。
区别：
1.进程有自己的空间地址，一方面多进程之间相互独立，另一方面占用的资源比线程多
2.线程是进程的执行单位，共享进程资源，多线程之间的切换开销比进程小。
3.在python中，进程可以充分利用多核，而线程因为有GIL的缘故，不能有效地利用多核。


六、
mysql, SQL Server, Oracle, db2: 关系型数据库
mongodb, redis, : 非关系型数据库


七、
sum = 0
for i in range(1, 101):
    sum += i
print(sum)


八、
def ShellSort(lst):
    if len(lst) <= 1:
        return lst
    inc = len(lst) // 2
    count = 0
    while inc >= 1:
        for i in range(inc, len(lst)):
            while (i >= inc and lst[i] < lst[i-inc]):
                count += 1
                print("count: ", count)
                lst[i], lst[i-inc] = lst[i-inc], lst[i]
                i -= inc
        inc = inc // 2
    return lst

a = [52, 11, 10, 6, -1, 2.2, 8, 8, 15]
lst=ShellSort(a)
print(lst)
复杂度：个人感觉在nlogn-n**2之间


九、
html.xpath('//h3[@class="t"]/a/@href')


十、
import json
def transform(x):
    if isinstance(x, dict):
        x = { i:j for i, j in list(x.items())[::-1]}
        for k, v in x.items():
            v = transform(v)
            x[k] = v
    if isinstance(x, list):
        for n, i in enumerate(x):
            i = transform(i)
            x[n] = i
    return x

str = '{"name":"Google", "location":{"street":"1600 Amphitheatre Parkway", "city":"Mountain View", "state":"California", "country":"US"},"employees":[{"name":"Michal", "divison":"Engineering"}, {"name":"Laura", "division":"HR"}, {"name":"Elise", "division":"Marketing"}]}'
d = eval(str)
print(d)
d = transform(d)
str_ = json.dumps(d, indent=4)
print(str_)
